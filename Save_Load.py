import pickle
#from Classes import *

#def userClass(userID,firstName,surname,simsCode,accessLevel):    
class user():
    def __init__(self,userID,firstName,surname,simsCode,accessLevel):
        self.userID = userID    ##PRIMARY KEY##     ##userID will be generated by the code#100-9999##
        self.firstName = firstName
        self.surname = surname
        self.simsCode = simsCode
        self.accessLevel = accessLevel
#print("b",userID,firstName,surname,simsCode,accessLevel)
#userID = user(userID,firstName,surname,simsCode,accessLevel)
#print("dict",userID.__dict__)

#Users = []

def saveUser(userID,firstName,surname,simsCode,accessLevel):
    loadUsers()
    print(Users)


    new_User = user(userID,firstName,surname,simsCode,accessLevel)
    print(new_User.firstName)
    Users.append(new_User)

    fh = open("User_Data.p","wb")         ##The entry should be encrypted##
    pickle.dump(Users,fh)
    fh.close()

def bookingSave():
    fh = open("Bookings.p","wb")
    pickle.dump(booking,fh)
    fh.close()

def lessonSave():
    fh = open("Lessons.p","wb")
    pickle.dump(lesson,fh)
    fh.close()

def resourceSave():
    fh = open("Resources.p","wb")
    pickle.dump(resource,fh)
    fh.close()

def loadUsers():
    global Users
    try:
        fh = open("User_Data.p","rb")
        Users = pickle.load(fh)
        fh.close()
    except:
        Users=[]
    

def loadBookings():
    fh = open("Booking.p","rb")
    bookings_Loaded = pickle.load(fh)
    fh.close()

def loadLessons():
    fh = open("Lessons.p","rb")
    lessons_Loaded = pickle.load(fh)
    fh.close()

def loadResources():
    fh = open("Resources.p","fh")
    resources_Loaded = pickle.load(fh)
    fh.close()


