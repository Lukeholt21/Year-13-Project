import pickle
    
class user():
    def __init__(self,userID,firstName,surname,simsCode,accessLevel,password):
        self.userID = userID    ##PRIMARY KEY##     ##userID will be generated by the code#100-9999##
        self.firstName = firstName
        self.surname = surname
        self.simsCode = simsCode
        self.accessLevel = accessLevel
        self.password = password

class resource():
    def __init__(self,resourceID,resource_location,resource_type,num_resource):
        self.resourceID = resourceID     ##PRIMARY KEY##
        self.resource_location = resource_location
        self.resource_type = resource_type
        self.num_resource = num_resource

class lesson():
    def __init__(self,lessonID,subject,class_size,faculty,lesson_time):
        self.lessonID = lessonID         ##Primary Key##
        self.subject = subject
        self.class_size = class_size
        self.faculty = faculty
        self.lesson_time = lesson_time

class booking():
    def __init__(self,bookingID,authorised,userID,resourceID,lessonID):
        self.bookingID = bookingID         ##Primary Key##
        self.authorised = authorised  
        self.userID = userID               ##Foreign Key##
        self.resourceID = resourceID       ##Foreign Key##
        self.lessonID = lessonID           ##Foreign Key##

def saveUser(userID,firstName,surname,simsCode,accessLevel,password):
    Users = loadUsers_saveload()

    new_User = user(userID,firstName,surname,simsCode,accessLevel,password)  ##formats the data into the user class format##  
    Users.append(new_User)                  ##Appends new users to existing user list##

    fh = open("User_Data.p","wb")           ##The entry should be encrypted##
    pickle.dump(Users,fh)
    fh.close()

def bookingSave():
    Bookings = loadBookings()
    
    new_booking = booking(bookingID,authorised,userID,resourceID,lessonID)
    Bookings.append(new_booking)
    
    fh = open("Bookings.p","wb")
    pickle.dump(Bookings,fh)
    fh.close()

def lessonSave():
    Lessons = loadLessons()
    
    new_lesson = lesson(lessonID,subject,class_size,faculty,lesson_time)
    Lessons.append(new_lesson)
    fh = open("Lessons.p","wb")
    pickle.dump(Lessons,fh)
    fh.close()

def resourceSave(resourceID,resource_location,resource_type,num_resource):
    Resources = loadResources()
    
    new_resource = resource(resourceID,resource_location,resource_type,num_resource)
    Resources.append(new_resource)


    fh = open("Resources.p","wb")
    pickle.dump(Resources,fh)
    fh.close()


def loadUsers_saveload():
    try:
        fh = open("User_Data.p","rb")       ##Loads existing users from file into array##
        Users = pickle.load(fh)
        fh.close()        
    except:
        Users=[]                            ##If file doesnt exist creates new array##
    return Users

def loadBookings():
    try:
        fh = open("Booking.p","rb")
        Bookings = pickle.load(fh)
        fh.close()
    except:
        Bookings = []
    return bookings

def loadLessons():
    try:
        fh = open("Lessons.p","rb")
        Lessons= pickle.load(fh)
        fh.close()
    except:
        Lessons = []
    return lessons

def loadResources():
    try:
        fh = open("Resources.p","rb")
        Resources = pickle.load(fh)
        fh.close()
    except:
        Resources=[]
    return Resources


